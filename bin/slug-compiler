#!/usr/bin/env ruby

require "slug_compiler"

build_dir, buildpack_url, cache_dir, output_dir = ARGV

build_dir_exists = !build_dir.nil? and File.exists?(build_dir)
cache_dir_exists = !cache_dir.nil? and File.exists?(cache_dir)
buildpack_url_is_valid = !buildpack_url.nil? and URI.parse(buildpack_url) rescue false
ouput_dir_exists = !output_dir.nil? and File.directory?(output_dir)

puts "#{build_dir_exists}, #{cache_dir_exists}, #{buildpack_url_is_valid}, #{ouput_dir_exists}"

puts "build dir exists: #{}"
abort "USAGE: #{$0} BUILD_DIR BUILDPACK_DIR CACHE_DIR OUTPUT_DIR" unless ARGV.size == 4 and
  build_dir_exists and cache_dir_exists and buildpack_url_is_valid and ouput_dir_exists

begin
  start = Time.now
  SlugCompiler.run(*ARGV)
  # TODO: unify this with existing logging
rescue SlugCompiler::CompileFail => e
  puts(" !     Heroku push rejected, #{e.message}\n")
rescue SlugCompiler::CompileError => e
  puts(" !     Heroku push rejected, #{e.message}\n")
  SlugCompiler.log("measure=slugc.fail elapsed=#{Time.now - start} " \
                   "message='#{e.message}'")
rescue => e
  puts
  puts(" !     Heroku push rejected due to an unrecognized error.")
  puts(" !     We've been notified, see http://support.heroku.com if the problem persists.")
  puts("\n")
  SlugCompiler.log_error("measure=slugc.error elapsed=#{Time.now - start}", e)
  raise if ENV["DEBUG"]
end
